package com.xu.day0;

/**
 * java基本类型及其所占字节数（byte）：
 * 1. boolean 布尔型 1/8 1bit
 * 2. byte 字节类型 1
 * 3. char 字符型 2 一个字符能存储一个中文汉字
 * 4. short 短整型 2
 * 5. int 整数类型 4
 * 6. float 浮点类型（单精度） 4
 * 7. long 长整形 8
 * 8. double 双精度类型（双精度） 8
 *
 * see detail https://blog.csdn.net/W_Leodong/article/details/80541796
 * java中数据的5种存储位置：
 * 1.寄存器
 *     最快的存储区，位于处理器内部，但是数量极其有限。所以寄存器根据需求进行自动分配，无法直接人为控制。
 * 2.栈内存
 *     位于RAM当中，通过堆栈指针可以从处理器获得直接支持。堆栈指针向下移动，则分配新的内存；向上移动，则释放那些内存。
 *     这种存储方式速度仅次于寄存器。
 *    （常用于存放对象引用和基本数据类型，而不用于存储对象）
 * 3.堆内存
 *     一种通用的内存池，也位于RAM当中。其中存放的数据由JVM自动进行管理。
 *     堆相对于栈的好处来说：编译器不需要知道存储的数据在堆里存活多长。当需要一个对象时，使用new写一行代码，当执行这行代码时，
 *     会自动在堆里进行存储分配。同时，因为以上原因，用堆进行数据的存储分配和清理，需要花费更多的时间。
 * 4.常量池
 *     常量(字符串常量和基本类型常量)
 *     通常直接存储在程序代码内部（常量池）。这样做是安全的，因为它们的值在初始化时就已经被确定，并不会被改变。
 *     常量池在java用于保存在编译期已确定的，已编译的class文件中的一份数据。它包括了关于类，方法，接口等中的常量，
 *     也包括字符串常量，如String s = "java"这种申明方式.
 * 5.非RAM存储区
 *     如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。
 *     其中两个基本的例子是：流对象和持久化对象。
 *
 * 堆内存存储 与 栈内存存储。
 *     相同之处：都是用于程序中的数据在RAM(内存)上的存储区域。并且Java会自动地管理堆和栈，不能人为去直接设置。
 *     不同之处：
 *         1.存储数据类型：栈内存中存放局部变量（基本数据类型和对象引用)，而堆内存用于存放对象（实体）。
 *         2.存储速度：就存储速度而言，栈内存的存储分配与清理速度更快于堆，并且栈内存的存储速度仅次于直接位于处理器当中的寄存器。
 *         3.灵活性：就灵活性而言，由于栈内存与堆内存存储机制的不同，堆内存灵活性更优于栈内存。
 *
 *         栈内存中存储的数据可以实现数据共享！相同则不再创建
 *
 *         我们知道局部变量存储于栈内存当中。那么成员变量呢？答案是：成员变量的数据存储于堆中该成员变量所属的对象里面。
 *         而栈内存与堆内存的另一不同点在于，堆内存中存放的变量都会进行默认初始化，而栈内存中存放的变量却不会。
 *         这也就是为什么，我们在声明一个成员变量时，可以不用对其进行初始化赋值。而如果声明一个局部变量却未进
 *         行初始赋值，如果想对其进行使用就会报编译异常的原因了。
 *
 *
 */
public class Jvm {
    public static void main(String[] args) {
        /**
         * String s=new String("xyz")究竟对象个数分为两种情况：
         * 1.如果String常理池中，已经创建"xyz"，则不会继续创建，此时只创建了一个对象new String("xyz")；
         * 2.如果String常理池中，没有创建"xyz"，则会创建两个对象，一个对象的值是"xyz"，一个对象new String("xyz")。
         */
        String a = new String("xyz");
        String b = new String("xyz");
        System.out.println(a == b); // false
    }
}
